{"version":3,"sources":["Components/ImageGalleryItem/ImageGalleryItem.js","Components/Modal/Modal.js","Components/Loader/Loader.js","Components/ImageGallery/ImageGallery.js","Components/Button/Button.js","Components/Searchbar/Searchbar.js","index.js"],"names":["ImageGalleryItem","image","title","largePic","setLargeImg","className","src","alt","onClick","Modal","escFunction","event","key","props","closeModalByClick","e","target","nodeName","window","addEventListener","this","removeEventListener","largeImageURL","Component","Spinner","type","color","height","width","timeout","ImageGallery","state","open","setState","images","isLoading","map","webformatURL","id","Button","fetchPics","Searchbar","searchText","apiUrl","apiKey","perPage","page","query","loaderToggle","prevstate","onTextChange","value","name","getPics","preventDefault","getResults","a","axios","get","result","data","hits","console","log","prevState","prevProps","onSubmit","autoComplete","autoFocus","placeholder","onChange","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ba6de5b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst ImageGalleryItem = ({ image, title, largePic, setLargeImg }) => {\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        src={image}\n        alt={title}\n        className=\"ImageGalleryItem-image\"\n        onClick={() => setLargeImg(largePic)}\n      />\n    </li>\n  );\n};\n\nexport default ImageGalleryItem;\n","import React, { Component } from \"react\";\n\nexport default class Modal extends Component {\n  escFunction = (event) => {\n    if (event.key === \"Escape\") {\n      this.props.setLargeImg(null);\n    }\n  };\n  closeModalByClick = (e) => {\n    if (e.target.nodeName === \"DIV\") this.props.setLargeImg(null);\n  };\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.escFunction);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.escFunction);\n  }\n\n  render() {\n    return (\n      <div className=\"Overlay\">\n        <div className=\"Modal\">\n          <img src={this.props.largeImageURL} alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nconst Spinner = () => {\n  return (\n    <Loader\n      type=\"Circles\"\n      color=\"#00BFFF\"\n      height={100}\n      width={100}\n      timeout={3000} //3 secs\n    />\n  );\n};\n\nexport default Spinner;\n","import React, { Component } from \"react\";\nimport ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\nimport PropTypes from \"prop-types\";\nimport Modal from \"../Modal/Modal\";\nimport Spinner from \"../Loader/Loader\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nexport default class ImageGallery extends Component {\n  state = {\n    open: false,\n    largeImageURL: \"\",\n  };\n\n  setLargeImg = (e) => {\n    this.setState({ largeImageURL: e });\n  };\n\n  render() {\n    let imageListContent;\n    const { images } = this.props;\n    return (\n      <>\n        {this.props.isLoading ? (\n          <Spinner />\n        ) : (\n          <ul className=\"ImageGallery\">\n            {images\n              ? (imageListContent = images.map((image) => (\n                  <ImageGalleryItem\n                    image={image.webformatURL}\n                    title={image.title}\n                    largePic={image.largeImageURL}\n                    setLargeImg={this.setLargeImg}\n                    key={image.id}\n                  />\n                )))\n              : (imageListContent = null)}\n          </ul>\n        )}\n\n        {this.state.largeImageURL && (\n          <Modal\n            largeImageURL={this.state.largeImageURL}\n            state={this.state}\n            setLargeImg={this.setLargeImg}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nImageGallery.propTypes = {\n  images: PropTypes.array.isRequired,\n};\n","import React from \"react\";\nimport \"../../index.css\";\n\nconst Button = ({ fetchPics }) => {\n  return (\n    <button className=\"Button\" onClick={fetchPics}>\n      Load more\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport ImageGallery from \"../ImageGallery/ImageGallery\";\nimport axios from \"axios\";\nimport Button from \"../Button/Button\";\n\nexport default class Searchbar extends Component {\n  state = {\n    searchText: \"\",\n    apiUrl: \"https://pixabay.com/api\",\n    apiKey: \"17140090-8e72979244da9bcaf046d5df2\",\n    images: [],\n    perPage: 12,\n    page: 1,\n    query: \"\",\n    isLoading: false,\n  };\n\n  loaderToggle = () => {\n    this.setState((prevstate) => ({\n      isLoading: !prevstate.isLoading,\n    }));\n  };\n\n  onTextChange = ({ target }) => {\n    const { value, name } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  getPics = (e) => {\n    e.preventDefault();\n    this.setState({\n      query: this.state.searchText,\n      page: 1,\n      searchText: \"\",\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.query !== this.state.query) {\n      this.fetchPics();\n    }\n  }\n\n  getResults = async (e) => {\n    e.preventDefault();\n    if (e.target.value === \"\") {\n      this.setState({ images: [] });\n    } else {\n      try {\n        this.loaderToggle();\n        const result = await axios.get(\n          `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&page=${this.state.page}&image_type=photo&per_page=${this.state.perPage}&safesearch=false`\n        );\n        this.setState({ images: result.data.hits, page: 2 });\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.loaderToggle();\n      }\n    }\n  };\n\n  fetchPics = async () => {\n    try {\n      this.loaderToggle();\n      const result = await axios.get(\n        `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&page=${this.state.page}&image_type=photo&per_page=${this.state.perPage}&safesearch=false`\n      );\n      this.setState((prevState) => ({\n        images: [...prevState.images, ...result.data.hits],\n        page: prevState.page + 1,\n      }));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.loaderToggle();\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <header className=\"Searchbar\">\n          <form className=\"SearchForm\" onSubmit={this.getResults}>\n            <button type=\"submit\" className=\"SearchForm-button\">\n              <span className=\"SearchForm-button-label\"></span>\n            </button>\n            <input\n              className=\"SearchForm-input\"\n              type=\"text\"\n              autoComplete=\"off\"\n              autoFocus\n              placeholder=\"Search images and photos\"\n              value={this.state.searchText}\n              onChange={this.onTextChange}\n              name=\"searchText\"\n            />\n          </form>\n        </header>\n        {this.state.images.length > 0 ? (\n          <ImageGallery\n            images={this.state.images}\n            isLoading={this.state.isLoading}\n          />\n        ) : null}\n        {this.state.images.length > 0 ? (\n          <Button fetchPics={this.fetchPics} />\n        ) : null}\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Searchbar from \"./Components/Searchbar/Searchbar\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Searchbar />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}